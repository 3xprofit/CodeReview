#! /usr/bin/env python
# -*- python -*-

####################################################################################################
#
# DiffViewer - Diff Viewer
# Copyright (C) Salvaire Fabrice 2012
#
####################################################################################################

####################################################################################################

import argparse
import sys

from PyQt5 import QtCore, QtWidgets

from pygments.lexers import get_lexer_for_filename

####################################################################################################

from CodeReview.Diff.RawTextDocument import RawTextDocument
from CodeReview.Diff.RawTextDocumentDiff import TwoWayFileDiffFactory
from CodeReview.Diff.SyntaxHighlighter import HighlightedText, highlight_text
from CodeReview.Diff.TextDocumentDiffModel import TextDocumentDiffModelFactory, highlight_document
from CodeReview.GUI.DiffViewer.DiffWidget import DiffView

####################################################################################################

class Application(QtWidgets.QApplication):

    ################################################

    def __init__(self, args):

        super(Application, self).__init__(sys.argv)
        
        self._main_window = QtWidgets.QMainWindow(None)
        
        self._central_widget = QtWidgets.QWidget(self._main_window)
        self._main_window.setCentralWidget(self._central_widget)
        self._vertical_layout = QtWidgets.QVBoxLayout(self._central_widget)
        
        self._diff_view = DiffView()
        self._vertical_layout.addWidget(self._diff_view)
        
        self._horizontal_layout = QtWidgets.QHBoxLayout()
        self._vertical_layout.addLayout(self._horizontal_layout)
        self._complete_checkbox = QtWidgets.QCheckBox(self._central_widget)
        self._complete_checkbox.setText("Complete")
        # QtWidgets.QApplication.translate("main_window", , None, QtWidgets.QApplication.UnicodeUTF8))
        self._horizontal_layout.addWidget(self._complete_checkbox)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self._horizontal_layout.addItem(spacerItem)
        self._refresh_button = QtWidgets.QPushButton(self._central_widget)
        self._refresh_button.setText("Refresh")
        # QtWidgets.QApplication.translate("main_window", "Refresh", None, QtWidgets.QApplication.UnicodeUTF8)
        self._horizontal_layout.addWidget(self._refresh_button)
        
        self._open_files(args)
        
        self._main_window.showMaximized()
        
        self._complete_checkbox.stateChanged.connect(self._set_document_models)

    ################################################

    def _open_files(self, args):

        self._raw_text_documents = []
        self._lexers = []
        for file_name in args.file1, args.file2:
            with open(file_name) as f:
                text = f.read()
            raw_text_document = RawTextDocument(text)
            self._raw_text_documents.append(raw_text_document)
            lexer = get_lexer_for_filename(file_name, stripnl=False)
            self._lexers.append(lexer)
        
        self._highlighted_documents = []
        if not args.show:
            file_diff = TwoWayFileDiffFactory().process(* self._raw_text_documents)
            self._document_models = TextDocumentDiffModelFactory().process(file_diff)
            self._highlighted_texts = []
            for raw_text_document, lexer in zip(self._raw_text_documents, self._lexers):
                highlighted_text = HighlightedText(raw_text_document, lexer)
                self._highlighted_texts.append(highlighted_text)
            for document_model, highlighted_text in zip(self._document_models, self._highlighted_texts):
                highlighted_document = highlight_document(document_model, highlighted_text)
                self._highlighted_documents.append(highlighted_document)
        else: # Only show the document
            # Fixme: broken, chunk_type is ???
            # self._diff_view.set_document_models(self._highlighted_documents, complete_mode)
            # File "/home/gv/fabrice/unison-osiris/git-python/DiffViewer/DiffWidget.py", line 333, in set_document_models
            # cursor.begin_block(side, text_block.frame_type)
            # File "/home/gv/fabrice/unison-osiris/git-python/DiffViewer/DiffWidget.py", line 99, in begin_block
            # if ((side == LEFT and frame_type == chunk_type.insert) or
            # File "/home/gv/fabrice/unison-osiris/git-python/DiffViewer/Tools/EnumFactory.py", line 107, in __eq__
            # return self._value == int(other)
            # TypeError: int() argument must be a string or a number, not 'NoneType'
            for raw_text_document, lexer in zip(self._raw_text_documents, self._lexers):
                highlighted_document = highlight_text(raw_text_document, lexer)
                self._highlighted_documents.append(highlighted_document)
        
        self._set_document_models()

    ################################################

    def _set_document_models(self):

        complete_mode = self._complete_checkbox.checkState() == QtCore.Qt.Checked
        self._diff_view.set_document_models(self._highlighted_documents, complete_mode)

####################################################################################################
#
# Options
#

parser = argparse.ArgumentParser(description='Diff Viewer')

parser.add_argument('file1', metavar='File1',
                    help='First file')

parser.add_argument('file2', metavar='File2',
                    help='Second File')

parser.add_argument('--show', action='store_true')

args = parser.parse_args()

####################################################################################################

application = Application(args)
application.exec_()

####################################################################################################
#
# End
#
####################################################################################################
