#! /usr/bin/env python
# -*- python -*-

####################################################################################################
#
# Copyright (C) 2012 Fabrice Salvaire.  All Rights Reserved.
# Contact: fabrice.salvaire@orange.fr
#
# This file is part of the Git-Python software.
#
####################################################################################################

####################################################################################################
#
#                                              Audit
#
# - 18/10/2011 Fabrice
#    x
#
####################################################################################################

####################################################################################################
#
# ./generate-rst --root-path=...
#
# ./tools/generate-rst --root-path=$PWD --module-path=$PWD/DiffViewer --file-per-module --dst-path=./doc/sphinx/source/api --module-summary-file --title=DiffViewer > ./doc/sphinx/source/api/DiffViewer.rst
#
####################################################################################################

####################################################################################################

import argparse
import os
import sys

from fnmatch import fnmatch

####################################################################################################

def to_absolute_path(path):
    return os.path.abspath(os.path.expanduser(path))

####################################################################################################

class PathAction(argparse.Action):

    ###############################################

    def __call__(self, parser, namespace, values, option_string=None):

        # print '%r %r %r' % (namespace, values, option_string)
        if values is not None:
            if isinstance(values, list):
                absolute_path = [to_absolute_path(x) for x in values]
            else:    
                absolute_path = to_absolute_path(values)
        else:
            absolute_path = None
        setattr(namespace, self.dest, absolute_path)
    
####################################################################################################
#
# Options
#

argument_parser = argparse.ArgumentParser(description='')

argument_parser.add_argument('--root-path',
                             dest='root_path',
                             action=PathAction,
                             default='.',
                             help='Root path')

argument_parser.add_argument('--module-path',
                             dest='module_path',
                             action=PathAction,
                             default='.',
                             help='Module path')

argument_parser.add_argument('--file-per-module',
                             dest='file_per_module',
                             action="store_true", default=False,
                             help='One file per module')

argument_parser.add_argument('--module-summary-file',
                             dest='module_summary_file',
                             action="store_true", default=False,
                             help='Generate a Module Summary .rst File')

argument_parser.add_argument('--title',
                             dest='title',
                             default='',
                             help='Title')

argument_parser.add_argument('--dst-path',
                             dest='dst_path',
                             action=PathAction,
                             default='.',
                             help='dst path')

args = argument_parser.parse_args()

####################################################################################################

def prolog(title):

    template = """
%(header_line)s
 %(title)s
%(header_line)s
"""
    
    rst = template.strip() % dict(
        title=title,
        header_line='='*(len(title) +2),
        )

    return rst

####################################################################################################

def process_module(module_path, module_name):

    mod_rst = ' :mod:`'

    template = """
%(header_line)s
%(mod)s%(module_name)s`
%(header_line)s

.. automodule:: %(module_path)s.%(module_name)s
   :members:
   :show-inheritance:
"""
    
    rst = template.strip() % dict(
        module_name=module_name,
        mod=mod_rst,
        header_line='*'*(len(module_name) + len(mod_rst) +2),
        module_path=module_path,
        )

    return rst

####################################################################################################

# Foo/Bar and Foo.Bar
module_path = args.module_path.replace(args.root_path + '/', '')
module_path_python = module_path.replace('/', '.')

dst_module_directory = os.path.join(args.dst_path, module_path)

end_marker = """
.. End
"""

if not args.file_per_module:
    title = os.path.basename(args.module_path)
    print prolog(title)

rst_file_names = []    
for filename in sorted(os.listdir(args.module_path)):
    if fnmatch(filename, '*.py') and filename != '__init__.py':
        module_name = filename.replace('.py', '')
        rst = process_module(module_path_python, module_name)
        if args.file_per_module:
            rst += '\n' + end_marker
            if not os.path.exists(dst_module_directory):
                os.mkdir(dst_module_directory)
            rst_file_name = os.path.join(dst_module_directory, module_name + '.rst')
            with open(rst_file_name, 'w') as f:
                f.write(rst)
            rst_file_name = os.path.join(module_path, module_name + '.rst')
            rst_file_names.append(rst_file_name)
        else:
            print '\n', rst

if not args.file_per_module:
    print end_marker

if args.module_summary_file:
    # title = os.path.basename(args.module_path)
    title = args.title
    print prolog(title)
    print """
.. toctree::
"""
    for rst_file_name in rst_file_names:
        print "  " + rst_file_name
    print end_marker

sys.exit(0)

####################################################################################################
#
# End
#
####################################################################################################
